def stop_container(container_name) {
        sh 'docker stop ' + container_name
}

def exec(container_name, command) {
    try {
        def cmd = 'docker exec ' + container_name + ' ' + command
        sh cmd
    } catch(error) {
        stop_container(container_name)
    }
}

node {
    def npm_img = docker.image('node:lts-alpine')
    def zap_img = docker.image('owasp/zap2docker-stable')
    
    stage('Run npm docker') {
        try {
            def npm_container = npm_img.run("-dt --rm -p 3000:3000 -w /app/src -v ${env.WORKSPACE}:/app/src --name node-test")
        } catch(error) {
            stop_container('node-test')
            throw new Exception("Error occured, stoping pipeline..")
        }
    }
    stage('Run zap docker') {
        try {
            def zap_container = zap_img.run("-dt --rm --name zap-test")
        } catch(error) {
            stop_container('zap-test')
            throw new Exception("Error occured, stoping pipeline..")
        }
    }
    stage('Build') {
        exec('node-test', 'npm install')
    }
    stage('Test') {
        exec('node-test', 'npm test')
    }
    stage('Launch web application for DAST') {
        exec('node-test', 'npm start &')
        exec('node-test', 'echo $! > .pidfile')
    }
    stage('DAST') {
        exec('zap-test', 'mkdir /zap/wrk')
        exec('zap-test', 'zap-full-scan.py -t 13.125.127.165:3000 -J report.json')
        sh 'docker cp zap-test:/zap/wrk/report.json ${env.WORKSPACE}/report.json'
    }
    stage('Stop docker') {
        npm_container.stop()
        zap_container.stop()
    }
}